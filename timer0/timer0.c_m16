#include "timer0.h"
#include <avr/interrupt.h>


/*
 * TIMER 0
 */

typedef struct _Timer0_State {
    uint8_t clock;
    timer_callback_t overflow_callback;
    timer_callback_t compare_callback;
}timer0_state_t;

timer0_state_t timer0_state = {0};

ISR(TIMER0_OVF_vect)
{
    if(timer0_state.overflow_callback) timer0_state.overflow_callback();
}

ISR(TIMER0_COMP_vect)
{
    if(timer0_state.compare_callback) timer0_state.compare_callback();
}

err_t timer0_set_mode(uint8_t mode)
{
    if(mode > 0x3) return E_INVALID_VALUE;
    
    //Очистим биты режима.
    TCCR0 &= ~((1 << WGM01) | (1 << WGM00));
    //Установим.
    TCCR0 |= (((mode & 0x2) >> 1) << WGM01) |
             ((mode & 0x1) << WGM00);
    
    return E_NO_ERROR;
}

err_t timer0_set_com_mode(uint8_t com_mode)
{
    if(com_mode > 0x3) return E_INVALID_VALUE;
    //для PWM режимов работы таймера нет режима TOGGLE.
    if((TCCR0 & WGM00) && com_mode == 0x1) return E_INVALID_VALUE;
    
    //Очистим биты режима.
    TCCR0 &= ~((1 << COM01) | (1 << COM00));
    //Установим.
    TCCR0 |= (((com_mode & 0x2) >> 1) << COM01) |
             ((com_mode & 0x1) << COM00);
    
    return E_NO_ERROR;
}

err_t timer0_set_clock(uint8_t clock)
{
    if(clock > 0x7) return E_INVALID_VALUE;
    
    timer0_state.clock = clock;
    
    return E_NO_ERROR;
}

timer_callback_t timer0_set_overflow_callback(timer_callback_t callback)
{
    timer_callback_t prev_callback = timer0_state.overflow_callback;
    
    //Запретим прерывание.
    BIT_OFF(TIMSK, TOIE0);
    //Установим каллбэк.
    timer0_state.overflow_callback = callback;
    //И разрешим снова, если нужно.
    if(timer0_state.overflow_callback){
        BIT_ON(TIMSK, TOIE0);
    }
    
    return prev_callback;
}

timer_callback_t timer0_set_compare_match_callback(timer_callback_t callback)
{
    timer_callback_t prev_callback = timer0_state.compare_callback;
    
    //Запретим прерывание.
    BIT_OFF(TIMSK, OCIE0);
    //Установим каллбэк.
    timer0_state.compare_callback = callback;
    //И разрешим снова, если нужно.
    if(timer0_state.compare_callback){
        BIT_ON(TIMSK, OCIE0);
    }
    
    return prev_callback;
}

err_t timer0_start()
{
    if(timer0_state.clock == 0) return E_TIMER_INVALID_CLOCK;
    
    //сбросим значение часов.
    timer0_stop();
    //Установим.
    TCCR0 |= (((timer0_state.clock & 0x4) >> 2) << CS02) |
             (((timer0_state.clock & 0x2) >> 1) << CS01) |
             ((timer0_state.clock & 0x1) << CS00);
    
    return E_NO_ERROR;
}

void timer0_stop()
{
    //Очистим биты источника тактирования.
    TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
}
