/**
 * @file timer0.h_m8
 * Библиотека для работы с таймером 0 на МК ATMega8+.
 */

#ifndef TIMER0_M8_H
#define	TIMER0_M8_H

#include <stdint.h>
#include <avr/io.h>
#include "bits/bits.h"
#include "defs/defs.h"
#include "timer/timer.h"

//Источники тактирования таймера.
#define TIMER0_CLOCK_NONE                       0
#define TIMER0_CLOCK_INTERNAL_SCALE_1           1
#define TIMER0_CLOCK_INTERNAL_SCALE_8           2
#define TIMER0_CLOCK_INTERNAL_SCALE_64          3
#define TIMER0_CLOCK_INTERNAL_SCALE_256         4
#define TIMER0_CLOCK_INTERNAL_SCALE_1024        5
#define TIMER0_CLOCK_EXTERNAL_FALLING_EDGE      6
#define TIMER0_CLOCK_EXTERNAL_RISING_EDGE       7

/**
 * Устанавливает источник тактирования.
 * @param clock Источник тактирования.
 * @return Код ошибки.
 */
err_t timer0_set_clock(uint8_t clock);

/**
 * Устанавливает значение счётчика.
 * @param cntr_value Значение счётчика.
 */
ALWAYS_INLINE static void timer0_set_counter_value(uint8_t cntr_value)
{
    TCNT0 = cntr_value;
}

/**
 * Получает значение счётчика.
 * @return Значение счётчика.
 */
ALWAYS_INLINE static uint8_t timer0_counter_value(void)
{
    return TCNT0;
}

/**
 * Устанавливает каллбэк переполнения таймера.
 * @param callback Каллбэк.
 * @return Предыдущий каллбэк.
 */
timer_callback_t timer0_set_overflow_callback(timer_callback_t callback);

/**
 * Запускает таймер.
 * @return Код ошибки.
 */
err_t timer0_start();

/**
 * Останавливает таймер.
 */
void timer0_stop();

/**
 * Сбрасывает предделитель таймера 0.
 * !!! У таймеров 0 и 1 общий предделитель. !!!
 */
ALWAYS_INLINE static void timer0_prescaler_reset()
{
    BIT_ON(SFIOR, PSR10);
}

#endif	/* TIMER0_M8_H */

